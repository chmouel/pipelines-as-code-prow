---
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: linters
  annotations:
    pipelinesascode.tekton.dev/on-event: "[push, pull_request]"
    pipelinesascode.tekton.dev/on-target-branch: "[main]"
    pipelinesascode.tekton.dev/max-keep-runs: "2"
    pipelinesascode.tekton.dev/cancel-in-progress: "true"
spec:
  params:
    - name: repo_url
      value: "{{repo_url}}"
    - name: revision
      value: "{{revision}}"
  pipelineSpec:
    tasks:
      - name: linters
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: fetch-repo
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/tektoncd/catalog/main/stepaction/git-clone/0.1/git-clone.yaml
              params:
                - name: output-path
                  value: $(workspaces.source.path)
                - name: url
                  value: "$(params.repo_url)"
                - name: revision
                  value: "$(params.revision)"
            - name: check-generate
              image: registry.access.redhat.com/ubi9/go-toolset
              workingDir: $(workspaces.source.path)
              script: |
                curl -LsSf https://astral.sh/uv/install.sh | sh
                source $HOME/.local/bin/env
                make check
            # - name: shellcheck
            #   displayName: "Shell scripts linter"
            #   image: koalaman/shellcheck-alpine
            #   workingDir: $(workspaces.source.path)
            #   script: |
            #     shellcheck $(find hack/ -type f -regex ".*sh" -print)
            - name: ruff-lint
              displayName: "Python Linter (ruff)"
              image: ghcr.io/astral-sh/ruff
              workingDir: $(workspaces.source.path)
              args: ["check", "$(workspaces.source.path)"]
            - name: ruff-format
              displayName: "Python Formatter (ruff)"
              image: ghcr.io/astral-sh/ruff
              workingDir: $(workspaces.source.path)
              args: ["format", "$(workspaces.source.path)", "--check"]
            - name: yamllint
              displayName: "YAML Linter"
              image: cytopia/yamllint
              workingDir: $(workspaces.source.path)
              script: |
                yamllint -f parsable -c .yamllint $(find . -type f -regex ".*y[a]ml" -print)
            - name: codespell
              image: registry.access.redhat.com/ubi9/python-312
              workingDir: $(workspaces.source.path)
              script: |
                pip3 install codespell
                codespell -d docs/content pkg test
            - name: markdownlint
              displayName: "Markdown Linter"
              image: thegeeklab/markdownlint-cli
              workingDir: $(workspaces.source.path)
              script: |
                markdownlint $(find . -type f -regex ".*md"  -not -regex '^./vendor/.*' -not -regex "^./docs/themes/.*" -not -regex './.vale/.*' -not -regex "^./.git/.*" -print)
    workspaces:
      - name: source
  workspaces:
    - name: source
      emptyDir: {}
